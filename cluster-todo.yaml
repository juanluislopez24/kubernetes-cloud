apiVersion: v1
kind: Service
metadata:
  name: ads
  labels:
    app: ads
    tier: backend
    role: ads-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: ads
    tier: backend
    role: ads-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: ads
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: ads
    role: ads-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: ads
        role: ads-role
        tier: backend
    spec:
      containers:
      - name: ads-role
        image: ads
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: exclusion
  labels:
    app: exclusion
    tier: backend
    role: exclusion-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: exclusion
    tier: backend
    role: exclusion-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: exclusion
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: exclusion
    role: exclusion-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: exclusion
        role: exclusion-role
        tier: backend
    spec:
      containers:
      - name: exclusion-role
        image: exclusion
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: matching
  labels:
    app: matching
    tier: backend
    role: matching-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: matching
    tier: backend
    role: matching-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: matching
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: matching
    role: matching-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: matching
        role: matching-role
        tier: backend
    spec:
      containers:
      - name: matching-role
        image: matching
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: pricing
  labels:
    app: pricing
    tier: backend
    role: pricing-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: pricing
    tier: backend
    role: pricing-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: pricing
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: pricing
    role: pricing-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: pricing
        role: pricing-role
        tier: backend
    spec:
      containers:
      - name: pricing-role
        image: pricing
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: ranking
  labels:
    app: ranking
    tier: backend
    role: ranking-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: ranking
    tier: backend
    role: ranking-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: ranking
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: ranking
    role: ranking-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: ranking
        role: ranking-role
        tier: backend
    spec:
      containers:
      - name: ranking-role
        image: ranking
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: targeting
  labels:
    app: targeting
    tier: backend
    role: targeting-role
spec:
  ports:
    # the port that this service should serve on
  - port: 5000
  selector:
    app: targeting
    tier: backend
    role: targeting-role
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: targeting
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: targeting
    role: targeting-role
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: targeting
        role: targeting-role
        tier: backend
    spec:
      containers:
      - name: targeting-role
        image: targeting
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: query
  labels:
    app: query_py
    tier: query
spec:
  type: LoadBalancer
  ports:
    # the port that this service should serve on
  - port: 80
  selector:
    app: query_py
    tier: query
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: query
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: query_py
    tier: query
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 3
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   tier: query
  template:
    metadata:
      labels:
        app: query_py
        tier: query
    spec:
      containers:
      - name: query_py
        image: query
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
- containerPort: 80